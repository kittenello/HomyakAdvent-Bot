import os
import random
import datetime
from datetime import timedelta
import telebot
import string
from telebot import apihelper, types
import logging
import json
import subprocess
import requests.exceptions
import sys
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# -*- coding: utf-8 -*-

VIDEO_FOLDER = 'files'
WELCOME = 'settings'
ADMINS = 7235730433, 7716662796
MAIN_CHAT = -1002334358016
DEBUG_TOPIC_ID = 3

LOGS_DIR = 'logs'
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[  
        logging.FileHandler(os.path.join(LOGS_DIR, "bot.log"), encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def process_apply_bonus(message, max_bonus_time):
    user_id = message.from_user.id
    try:
        hours_to_apply = int(message.text)
        if hours_to_apply <= 0 or hours_to_apply > max_bonus_time:
            bot.send_message(message.chat.id, f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–æ—Ç 1 –¥–æ {max_bonus_time}).")
            return

        update_bonus_time(user_id, -hours_to_apply)  # –£–º–µ–Ω—å—à–∞–µ–º –±–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–µ–º—è
        apply_bonus_time(user_id)  # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–µ–º—è –∫ cooldown

        bot.send_message(message.chat.id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {hours_to_apply} —á–∞—Å–æ–≤!")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def initialize_referral(user_id):
    referrals_file_path = 'settings/referrals.json'
    try:
        with open(referrals_file_path, 'r') as file:
            referrals_data = json.load(file)
    except json.JSONDecodeError:
        referrals_data = {}

    if str(user_id) not in referrals_data:
        referrals_data[str(user_id)] = {
            'referrals': [],
            'bonus_time': 0
        }
        with open(referrals_file_path, 'w') as file:
            json.dump(referrals_data, file)

def get_referral_data(user_id):
    referrals_file_path = 'settings/referrals.json'
    try:
        with open(referrals_file_path, 'r') as file:
            referrals_data = json.load(file)
    except json.JSONDecodeError:
        referrals_data = {}
    return referrals_data.get(str(user_id), {'referrals': [], 'bonus_time': 0})

def update_bonus_time(user_id, bonus_hours):
    referrals_file_path = 'settings/referrals.json'
    try:
        with open(referrals_file_path, 'r') as file:
            referrals_data = json.load(file)
    except json.JSONDecodeError:
        referrals_data = {}

    if str(user_id) in referrals_data:
        referrals_data[str(user_id)]['bonus_time'] += bonus_hours
        with open(referrals_file_path, 'w') as file:
            json.dump(referrals_data, file)

def apply_bonus_time(user_id):
    referrals_file_path = 'settings/referrals.json'
    users_file_path = 'settings/users.json'

    try:
        with open(referrals_file_path, 'r') as file:
            referrals_data = json.load(file)
    except json.JSONDecodeError:
        referrals_data = {}

    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    if str(user_id) in referrals_data and referrals_data[str(user_id)]['bonus_time'] > 0:
        bonus_hours = referrals_data[str(user_id)]['bonus_time']
        current_cooldown = users_data.get(str(user_id), {}).get('cooldown', 1440)
        new_cooldown = max(0, current_cooldown - bonus_hours * 60)
        users_data[str(user_id)]['cooldown'] = new_cooldown
        referrals_data[str(user_id)]['bonus_time'] = 0

        with open(users_file_path, 'w') as file:
            json.dump(users_data, file)
        with open(referrals_file_path, 'w') as file:
            json.dump(referrals_data, file)

        return True
    return False

def log_message(message: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏."""
    logging.info(message)

def load_bot_token():
    with open('settings/token.json', 'r') as file:
        data = json.load(file)
        return data['bot_token']
bot = telebot.TeleBot(load_bot_token())


def initialize_user(user_id):
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            'last_opened': None,
            'cooldown': 1440,  # Default cooldown is 24 hours (1440 minutes)
            'premium': False   # Default premium status
        }
        with open(users_file_path, 'w') as file:
            json.dump(users_data, file)

def get_current_time():
    return datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3)))

def is_premium(user_id):
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—è premium, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –æ–±—ã—á–Ω—ã–º
    if str(user_id) not in users_data:
        return False

    user_data = users_data[str(user_id)]
    if not user_data.get('premium', False):
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ premium_expiration –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    if 'premium_expiration' in user_data:
        expiration_time = datetime.datetime.fromisoformat(user_data['premium_expiration'])
        if get_current_time() > expiration_time:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            user_data['premium'] = False
            del user_data['premium_expiration']
            with open(users_file_path, 'w') as file:
                json.dump(users_data, file)
            return False

    return True

def is_day_opened(user_id):
    users_file_path = 'settings/users.json'
    if not os.path.exists(users_file_path):
        with open(users_file_path, 'w') as file:
            json.dump({}, file)

    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ last_opened –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ö–î –Ω–µ—Ç
    if str(user_id) not in users_data or not isinstance(users_data[str(user_id)].get('last_opened'), str):
        return False, None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –ö–î
        last_opened = datetime.datetime.fromisoformat(users_data[str(user_id)]['last_opened'])
        cooldown_minutes = users_data[str(user_id)]['cooldown']
        cooldown = datetime.timedelta(minutes=cooldown_minutes)
        next_open_time = last_opened + cooldown

        if get_current_time() < next_open_time:
            remaining_time = next_open_time - get_current_time()
            return True, remaining_time
        else:
            return False, None
    except (KeyError, ValueError):
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ö–î
        users_data[str(user_id)]['last_opened'] = None
        with open(users_file_path, 'w') as file:
            json.dump(users_data, file)
        return False, None

def mark_day_as_opened(user_id):
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    cooldown = 360 if users_data.get(str(user_id), {}).get('premium', False) else 1440

    users_data[str(user_id)] = {
        'last_opened': get_current_time().isoformat(),
        'cooldown': cooldown,
        'premium': is_premium(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Premium
    }
    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

@bot.message_handler(func=lambda message: message.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_panel(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return

    commands_info = (
        "/rkd [id] - –£–±—Ä–∞—Ç—å –ö–î –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID.\n"
        "/gtime [id] - –£–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ—Ç–∫—Ä—ã–≤–∞–ª –¥–µ–Ω—å.\n"
        "/gkd [minutes] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ö–î –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–Ω—è (–≤ –º–∏–Ω—É—Ç–∞—Ö). "
        "0 - —Å–±—Ä–æ—Å–∏—Ç—å –ö–î –¥–ª—è –≤—Å–µ—Ö, 1 - –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è (24 —á–∞—Å–∞).\n"
        "/gad - –°–Ω—è—Ç—å –ö–î –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º).\n"
        "/folders - –£–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –µ—Å—Ç—å —Ö–æ–º—è–∫–∏\n"
        "üëÜ /folders [–ò–º—è] - –£–∑–Ω–∞—Ç—å –≤–∏–¥–µ–æ —Ö–æ–º—è–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "/gp [id] - –î–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ ID\n"
        "/gpt [id] [time] - –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–µ–º–∏—É–º [id]\n"
        "/rp [id] - –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ [ID]\n"
        "/cn [–ò–º—è] - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–º–µ–Ω–∏ —Ö–æ–º—è–∫–∞\n"
        "/addvideo - homyak add\n"
        "/sth - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ–º—è–∫–∞\n"
        "/referrals [id] - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    )
    bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: \n\n{commands_info}")

@bot.message_handler(commands=['referrals'])
def view_referrals(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /referrals [id]")
        return

    target_id = int(args[0])
    referral_data = get_referral_data(target_id)
    referrals = referral_data['referrals']
    bonus_time = referral_data['bonus_time']

    if not referrals:
        bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
    else:
        bot.send_message(
            message.chat.id,
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}:\n\n"
            f"{' '.join(map(str, referrals))}\n\n"
            f"‚è∞ –ë–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–µ–º—è: {bonus_time} —á–∞—Å–æ–≤"
        )

def is_admin(user_id):
    admins_file_path = 'settings/admins.json'
    try:
        with open(admins_file_path, 'r') as file:
            admins_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        admins_data = {'admins': []}  # Default to no admins if file is missing/corrupted
    return user_id in admins_data.get('admins', []) or user_id == ADMINS

@bot.message_handler(func=lambda message: message.text == "‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞")
def premium_sub(message):
    user_id = message.from_user.id

    if not is_premium(user_id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return

    commands_info = (
        "–ö–î –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ö–æ–º—è–∫–∞ —Ä–∞–∑ –≤ 6 —á–∞—Å–∞\n"
        "–ü–æ–ª—É—á–µ–Ω–∏–µ 2 —Ö–æ–º—è–∫–∞ –∑–∞ —Ä–∞–∑.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –≤—Å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–° - @kittenello \n"
    )
    premium_status, remaining_time = is_premium_with_remaining_time(user_id)
    if premium_status:
        if remaining_time:
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes = remainder // 60
            premium_text = (
                f"‚≠êÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å Premium-–ø–æ–¥–ø–∏—Å–∫–∞!\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {hours} —á. {minutes} –º–∏–Ω."
                )
        else:
            premium_text = "‚≠êÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å Premium-–ø–æ–¥–ø–∏—Å–∫–∞!\n‚è≥–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: LifeTime"
    else:
        premium_text = "üí° –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É!"
    bot.send_message(message.chat.id, f"–ü—Ä–µ–º–∏—É–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n\n{commands_info}\n\n{premium_text}")

def send_admin_log(user_id, name_homyak):
    admin_chat_id = -1002334358016
    
    users_file_path = 'settings/opens.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {"counters": {"daily": {}, "weekly": {}}}

    today = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).strftime('%Y-%m-%d')
    week_start = (datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))) - datetime.timedelta(days=datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).weekday())).strftime('%Y-%m-%d')

    daily_count = users_data['counters']['daily'].get(today, {}).get(name_homyak, 0)
    weekly_count = users_data['counters']['weekly'].get(week_start, {}).get(name_homyak, 0)


    user = bot.get_chat_member(user_id, user_id).user
    username = user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    log_message = (
        f"üìù –õ–æ–≥ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ö–æ–º—è–∫–∞:üìù\n"
        f"üìù 1. –ù–∏–∫–Ω–µ–π–º: @{username} [ID: {user_id}]\n"
        f"üìù 2. –í—ã–ø–∞–≤—à–∏–π —Ö–æ–º—è–∫: {name_homyak}\n"
        f"üìù 3. –í—Ä–µ–º—è –≤—ã–ø–∞–¥–∞–Ω–∏—è: {get_current_time().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üìù 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏–π:\n"
        f"   - –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_count}\n"
        f"   - –ó–∞ –Ω–µ–¥–µ–ª—é: {weekly_count}"
        )
    bot.send_message(
        admin_chat_id,
        f"{log_message}",
        message_thread_id=411  # –£–∫–∞–∑—ã–≤–∞–µ–º ID —Ç–æ–ø–∏–∫–∞
    )

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    args = message.text.split()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            'last_opened': None,
            'cooldown': 1440,  # Default cooldown is 24 hours (1440 minutes)
            'premium': False   # Default premium status
        }
        with open(users_file_path, 'w') as file:
            json.dump(users_data, file)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1 and args[1].isdigit():
        referrer_id = int(args[1])
        if referrer_id != user_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª —Å–∞–º —Å–µ–±—è
            referrals_file_path = 'settings/referrals.json'
            try:
                with open(referrals_file_path, 'r') as file:
                    referrals_data = json.load(file)
            except json.JSONDecodeError:
                referrals_data = {}

            if str(referrer_id) in referrals_data and user_id not in referrals_data[str(referrer_id)]['referrals']:
                referrals_data[str(referrer_id)]['referrals'].append(user_id)
                update_bonus_time(referrer_id, -3)  # –£–º–µ–Ω—å—à–∞–µ–º –ö–î –Ω–∞ 3 —á–∞—Å–∞
                with open(referrals_file_path, 'w') as file:
                    json.dump(referrals_data, file)

    premium_status, remaining_time = is_premium_with_remaining_time(user_id)
    if premium_status:
        if remaining_time:
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes = remainder // 60
            premium_text = (
                f"‚≠êÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å Premium-–ø–æ–¥–ø–∏—Å–∫–∞!\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {hours} —á. {minutes} –º–∏–Ω."
                )
        else:
            premium_text = "‚≠êÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å Premium-–ø–æ–¥–ø–∏—Å–∫–∞!\n‚è≥–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: LifeTime"
    else:
        premium_text = "üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-–ø–æ–¥–ø–∏—Å–∫—É. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ @kittenello"
    #"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-–ø–æ–¥–ø–∏—Å–∫—É. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /premium"

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = telebot.types.KeyboardButton("‚òÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –¥–µ–Ω—å")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    item2 = telebot.types.KeyboardButton("‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞")

    if user_id in ADMINS:
        item3 = telebot.types.KeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        markup.add(item1, item2, item3)
    else:
        markup.add(item1, item2)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        f"‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Homyak –ê–¥–≤–µ–Ω—Ç-–ö–∞–ª–µ–Ω–¥–∞—Ä—å!\n\n"
        f"üéÅ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –í–∞—Å –∂–¥—É—Ç –ª—é–±–∏–º—ã–µ —Ö–æ–º—è–∫–∏.\n"
        f"  ‚îî –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –¥–Ω–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π –≤—ã —Ö–æ–º—è–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n\n"
        f"{premium_text}"
    )

    # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ welcome.mp4
    welcome_video_path = os.path.join(WELCOME, "welcome.mp4")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
    if os.path.exists(welcome_video_path):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º (caption)
        with open(welcome_video_path, 'rb') as video_file:
            bot.send_video(message.chat.id, video_file, caption=welcome_message, reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        msg = bot.send_message(message.chat.id, welcome_message, reply_markup=markup)
        user_states[message.from_user.id] = {'last_msg_id': msg.message_id, 'waiting_for_video': False}

def remaining_time_str(remaining_time):
    if remaining_time:
        hours, remainder = divmod(remaining_time.seconds, 3600)
        minutes = remainder // 60
        return f"{hours} —á. {minutes} –º–∏–Ω."
    return "–ù–∞–≤—Å–µ–≥–¥–∞"

@bot.message_handler(func=lambda message: message.text == "‚òÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –¥–µ–Ω—å")
def open_day(message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ user_states
    if user_id not in user_states:
        user_states[user_id] = {'last_msg_id': None, 'waiting_for_video': False}

    is_opened, remaining_time = is_day_opened(user_id)
    if is_opened:
        hours, remainder = divmod(remaining_time.seconds, 3600)
        minutes = remainder // 60
        cooldown_text = f"{hours} —á. {minutes} –º–∏–Ω."
        bot.send_message(message.chat.id, f"‚ùå –í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è!\n‚úÖ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è: {cooldown_text}")
        return

    if user_states[user_id]['last_msg_id']:
        try:
            bot.delete_message(message.chat.id, user_states[user_id]['last_msg_id'])
        except Exception as e:
            print(f"Error deleting message: {e}")

    if not user_states[user_id]['waiting_for_video']:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = telebot.types.KeyboardButton("‚òÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –¥–µ–Ω—å")
        #item2 = telebot.types.KeyboardButton("üôè –í—Ç–æ—Ä–æ–π —à–∞–Ω—Å")
        markup.add(item1)

        msg = bot.send_message(message.chat.id, "‚òÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –¥–µ–Ω—å - –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ —É–∑–Ω–∞–≤–∞–π—Ç–µ –∫–∞–∫–æ–π –≤—ã —Ö–æ–º—è–∫!\nü§î –ß—Ç–æ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å?\n - NONE", reply_markup=markup)
        user_states[user_id]['last_msg_id'] = msg.message_id
        user_states[user_id]['waiting_for_video'] = True
    else:
        send_video(message)

def send_video(message):
    user_id = message.from_user.id

    if 'last_msg_id' in user_states[user_id]:
        try:
            bot.delete_message(message.chat.id, user_states[user_id]['last_msg_id'])
        except Exception as e:
            print(f"Error deleting message: {e}")

    videos = [f for f in os.listdir(VIDEO_FOLDER) if f.endswith('.mp4')]
    if not videos:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞!\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. üò≠")
        return

    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    is_premium = users_data.get(str(user_id), {}).get('premium', False)
    num_hamsters = 2 if is_premium else 1

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∏–¥–µ–æ
    selected_videos = random.sample(videos, min(num_hamsters, len(videos)))

    media = []
    hamster_names = []
    for video in selected_videos:
        media.append(telebot.types.InputMediaVideo(open(os.path.join(VIDEO_FOLDER, video), 'rb')))
        name_homyak = os.path.splitext(video)[0]
        hamster_names.append(name_homyak)

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(hamster_names) == 2:
        result_text = (
            f"üòç –°–µ–≥–æ–¥–Ω—è –≤—ã: {hamster_names[0]} –∏ {hamster_names[1]} –•–æ–º—è–∫!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {update_counters(hamster_names[0])[0]} –∏ {update_counters(hamster_names[1])[0]}\n"
            f"- –ó–∞ –Ω–µ–¥–µ–ª—é: {update_counters(hamster_names[0])[1]} –∏ {update_counters(hamster_names[1])[1]}"
        )
    else:
        result_text = (
            f"üòç –°–µ–≥–æ–¥–Ω—è –≤—ã: {hamster_names[0]} –•–æ–º—è–∫!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {update_counters(hamster_names[0])[0]}\n"
            f"- –ó–∞ –Ω–µ–¥–µ–ª—é: {update_counters(hamster_names[0])[1]}"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    if media:
        bot.send_media_group(message.chat.id, media)
        bot.send_message(message.chat.id, result_text)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    for name in hamster_names:
        send_admin_log(user_id, name)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–Ω—è
    mark_day_as_opened(user_id)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    user_states[user_id]['waiting_for_video'] = False

def update_counters(name_homyak):
    users_file_path = 'settings/opens.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {"counters": {"daily": {}, "weekly": {}}}

    today = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).strftime('%Y-%m-%d')
    week_start = (datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))) - datetime.timedelta(days=datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).weekday())).strftime('%Y-%m-%d')

    if 'counters' not in users_data:
        users_data['counters'] = {"daily": {}, "weekly": {}}

    if today not in users_data['counters']['daily']:
        users_data['counters']['daily'][today] = {}
    if name_homyak not in users_data['counters']['daily'][today]:
        users_data['counters']['daily'][today][name_homyak] = 0
    users_data['counters']['daily'][today][name_homyak] += 1

    if week_start not in users_data['counters']['weekly']:
        users_data['counters']['weekly'][week_start] = {}
    if name_homyak not in users_data['counters']['weekly'][week_start]:
        users_data['counters']['weekly'][week_start][name_homyak] = 0
    users_data['counters']['weekly'][week_start][name_homyak] += 1

    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

    return users_data['counters']['daily'][today][name_homyak], users_data['counters']['weekly'][week_start][name_homyak]

@bot.message_handler(commands=['addvideo'])
def add_video(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–æ—Ç–∞.")
    bot.register_next_step_handler(message, handle_video_upload)

def handle_video_upload(message):
    if message.content_type != 'video':
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
        return

    file_info = bot.get_file(message.video.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    bot.send_message(message.chat.id, "–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —ç—Ç–æ–≥–æ —Ö–æ–º—è–∫–∞?")
    bot.register_next_step_handler(message, lambda msg: handle_name_input(msg, downloaded_file))

def handle_name_input(message, video_data):
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    file_path = os.path.join(VIDEO_FOLDER, f"{name}.mp4")
    with open(file_path, 'wb') as new_file:
        new_file.write(video_data)

    bot.send_message(message.chat.id, f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ '{name}'.")

@bot.message_handler(commands=['rkd'])
def reset_cooldown(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rkd [id]")
        return
    user_id = int(args[0])
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if str(user_id) in users_data:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ last_opened, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        users_data[str(user_id)]['last_opened'] = None
        with open(users_file_path, 'w') as file:
            json.dump(users_data, file)
        bot.send_message(message.chat.id, f"–ö–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.")
        bot.send_message(user_id, f"–í–∞–º —Å–Ω—è–ª–∏ –ö–î! –í—ã –º–æ–∂–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É.")
    else:
        bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –±—ã–ª–æ –ö–î.")

@bot.message_handler(commands=['gtime'])
def get_last_opened_time(message):
    user_id = message.from_user.id
    user_id = message.from_user.id
    if user_id not in ADMINS:
        users_file_path = 'settings/users.json'
        try:
            with open(users_file_path, 'r') as file:
                users_data = json.load(file)
        except json.JSONDecodeError:
            users_data = {}
        if not users_data.get(str(user_id), {}).get('premium', False):
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /gtime [id]")
        return
    target_user_id = int(args[0])
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ last_opened
    if str(target_user_id) in users_data and 'last_opened' in users_data[str(target_user_id)]:
        last_opened = datetime.datetime.fromisoformat(users_data[str(target_user_id)]['last_opened'])
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ—Ç–∫—Ä—ã–≤–∞–ª –¥–µ–Ω—å –≤ {last_opened.strftime('%H:%M:%S')}")
    else:
        bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–Ω—è.")

@bot.message_handler(commands=['gkd'])
def set_cooldown(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /gkd [minutes]")
        return
    minutes = int(args[0])
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}
    
    if minutes == 0:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ö–î –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in list(users_data.keys()):
            users_data[user_id]['last_opened'] = None
        bot.send_message(message.chat.id, "–ö–î –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–Ω—è —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    elif minutes == 1:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ö–î
        for user_id in list(users_data.keys()):
            cooldown = 360 if users_data[user_id].get('premium', False) else 1440
            users_data[user_id]['cooldown'] = cooldown
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–Ω—è.")
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ö–î
        for user_id in list(users_data.keys()):
            if not users_data[user_id].get('premium', False):  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_data[user_id]['cooldown'] = minutes
        bot.send_message(message.chat.id, f"–ö–î –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

@bot.message_handler(commands=['rac'])
def reset_admin_cooldown(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    for admin_id in ADMINS:
        users_data[str(admin_id)] = {
            'last_opened': None,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
            'cooldown': 0         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown –≤ 0
        }

    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

    bot.send_message(message.chat.id, "+")

@bot.message_handler(commands=['cn'])
def clear_counter(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cn [name]")
        return

    name_homyak = args[0]
    videos = [f for f in os.listdir(VIDEO_FOLDER) if f.endswith('.mp4')]
    video_names = [os.path.splitext(video)[0] for video in videos]

    if name_homyak not in video_names:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: –•–æ–º—è–∫ '{name_homyak}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤–∏–¥–µ–æ.")
        return

    users_file_path = 'settings/opens.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {"counters": {"daily": {}, "weekly": {}}}
    today = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).strftime('%Y-%m-%d')
    week_start = (datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))) - datetime.timedelta(days=datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).weekday())).strftime('%Y-%m-%d')

    if 'counters' not in users_data:
        users_data['counters'] = {"daily": {}, "weekly": {}}

    if today in users_data['counters']['daily'] and name_homyak in users_data['counters']['daily'][today]:
        del users_data['counters']['daily'][today][name_homyak]

    if week_start in users_data['counters']['weekly'] and name_homyak in users_data['counters']['weekly'][week_start]:
        del users_data['counters']['weekly'][week_start][name_homyak]

    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

    bot.send_message(message.chat.id, f"–°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ö–æ–º—è–∫–∞ '{name_homyak}' —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")

@bot.message_handler(commands=['folders'])
def list_or_send_hamsters(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    videos = [f for f in os.listdir(VIDEO_FOLDER) if f.endswith('.mp4')]

    if len(args) == 1:
        if not videos:
            bot.send_message(message.chat.id, "–í –ø–∞–ø–∫–µ –Ω–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤.")
            return

        hamster_names = "\n".join([os.path.splitext(video)[0] for video in videos])
        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–º—è–∫–æ–≤:\n{hamster_names}")
    elif len(args) == 2:
        name = args[1]
        matching_videos = [video for video in videos if os.path.splitext(video)[0] == name]

        if not matching_videos:
            bot.send_message(message.chat.id, f"–•–æ–º—è–∫ —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        video_path = os.path.join(VIDEO_FOLDER, matching_videos[0])
        with open(video_path, 'rb') as file:
            bot.send_video(message.chat.id, file)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /folders –∏–ª–∏ /folders [name]")

@bot.message_handler(commands=['premium'])
def premium_info(message):
    user_id = message.from_user.id
    is_premium_status, remaining_time = is_premium_with_remaining_time(user_id)
    
    if is_premium_status:
        if remaining_time:
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes = remainder // 60
            premium_text = (
                f"‚≠êÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å Premium-–ø–æ–¥–ø–∏—Å–∫–∞!\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {hours} —á. {minutes} –º–∏–Ω.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Premium:\n"
                "- –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Ö–æ–º—è–∫–æ–≤ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞ (—Ä–∞–Ω–µ–µ 24 —á–∞—Å–∞)\n"
                "- –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /gtime [id] - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–∫—Ä—ã–≤–∞–ª —Ö–æ–º—è–∫–∞\n"
                "- –í—ã–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É 2 —Ö–æ–º—è–∫–æ–≤ –∑–∞ —Ä–∞–∑"
            )
        else:
            premium_text = (
                f"‚≠êÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å Premium-–ø–æ–¥–ø–∏—Å–∫–∞!\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: LifeTime\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Premium:\n"
                "- –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Ö–æ–º—è–∫–æ–≤ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞ (—Ä–∞–Ω–µ–µ 24 —á–∞—Å–∞)\n"
                "- –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /gtime [id] - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–∫—Ä—ã–≤–∞–ª —Ö–æ–º—è–∫–∞\n"
                "- –í—ã–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É 2 —Ö–æ–º—è–∫–æ–≤ –∑–∞ —Ä–∞–∑"
            )
    else:
        premium_text = (
            "üí° –£ –≤–∞—Å –Ω–µ—Ç Premium-–ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "üåü Premium-–ø–æ–¥–ø–∏—Å–∫–∞ üåü\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 20 —Ä—É–±–ª–µ–π\n"
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            "- –û—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–µ–Ω—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞.\n"
            "- –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /gtime.\n"
            "- –í—ã–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É 2 —Ö–æ–º—è–∫–æ–≤ –∑–∞ —Ä–∞–∑.\n\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ Premium –≤—ã –¥–æ–ª–∂–Ω—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å @kittenello"
        )
    
    bot.send_message(message.chat.id, premium_text)


@bot.message_handler(commands=['gpt'])
def give_premium_time(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) < 3 or not args[0].isdigit() or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /gpt [id] [hours] [reason]")
        return

    user_id = int(args[0])
    hours = int(args[1])
    reason_prem = ' '.join(args[2:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É (–ø—Ä–∏—á–∏–Ω–∞)

    expiration_time = get_current_time() + datetime.timedelta(hours=hours)
    users_file_path = 'settings/users.json'

    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            'last_opened': None,
            'cooldown': 360,  # Default cooldown for Premium
            'premium': True,
            'premium_expiration': expiration_time.isoformat(),
            'premium_reason': reason_prem  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É
        }
    else:
        users_data[str(user_id)]['premium'] = True
        users_data[str(user_id)]['premium_expiration'] = expiration_time.isoformat()
        users_data[str(user_id)]['premium_reason'] = reason_prem  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É

    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

    bot.send_message(message.chat.id, f"Premium-–ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {hours} —á–∞—Å–æ–≤.")
    bot.send_message(user_id, f"‚ùó–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è Premium-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {hours} —á–∞—Å(-–æ–≤)\nüòé –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {reason_prem}]")

@bot.message_handler(commands=['rp'])
def remove_premium(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rp [id]")
        return

    user_id = int(args[0])
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if str(user_id) not in users_data:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–Ω–∏–º–∞–µ–º Premium-—Å—Ç–∞—Ç—É—Å
    users_data[str(user_id)]['premium'] = False
    users_data[str(user_id)]['cooldown'] = 1440  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ö–î

    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

    bot.send_message(message.chat.id, f"Premium-–ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    bot.send_message(user_id, f"üò≠ –í–∞–º —Å–Ω—è–ª–∏ Premium-–ø–æ–¥–ø–∏—Å–∫—É.")

@bot.message_handler(commands=['gp'])
def give_premium(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /gp [id]")
        return

    user_id = int(args[0])
    users_file_path = 'settings/users.json'

    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å premium = True
    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            'last_opened': None,
            'cooldown': 360,  # Default cooldown for Premium
            'premium': True
        }
    else:
        users_data[str(user_id)]['premium'] = True
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ premium_expiration, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        if 'premium_expiration' in users_data[str(user_id)]:
            del users_data[str(user_id)]['premium_expiration']

    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

    bot.send_message(message.chat.id, f"Premium-–ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    bot.send_message(user_id, f"ü§© –í—ã –ø–æ–ª—É—á–∏–ª–∏ Premium-–ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–æ–∫–æ–º –Ω–∞–≤—Å–µ–≥–¥–∞.")

@bot.message_handler(commands=['chp'])
def check_premium(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1 or not args[0].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chp [id]")
        return

    user_id = int(args[0])
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if str(user_id) not in users_data:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_data = users_data[str(user_id)]
    premium_status = user_data.get('premium', False)

    if not premium_status:
        bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç Premium-–ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if 'premium_expiration' in user_data:
        expiration_time = datetime.datetime.fromisoformat(user_data['premium_expiration'])
        if get_current_time() > expiration_time:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            user_data['premium'] = False
            del user_data['premium_expiration']
            with open(users_file_path, 'w') as file:
                json.dump(users_data, file)
            bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±–æ–ª—å—à–µ –Ω–µ—Ç Premium-–ø–æ–¥–ø–∏—Å–∫–∏ (–∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è).")
            return

        expiration_time_str = expiration_time.strftime('%Y-%m-%d %H:%M:%S')
        bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è Premium-–ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expiration_time_str}.")
    else:
        bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è Premium-–ø–æ–¥–ø–∏—Å–∫–∞.")

def is_premium_with_remaining_time(user_id):
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—è premium, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –æ–±—ã—á–Ω—ã–º
    if str(user_id) not in users_data:
        return False, None

    user_data = users_data[str(user_id)]
    if not user_data.get('premium', False):
        return False, None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ premium_expiration –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    if 'premium_expiration' in user_data:
        expiration_time = datetime.datetime.fromisoformat(user_data['premium_expiration'])
        if get_current_time() > expiration_time:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            user_data['premium'] = False
            del user_data['premium_expiration']
            with open(users_file_path, 'w') as file:
                json.dump(users_data, file)
            return False, None

        remaining_time = expiration_time - get_current_time()
        return True, remaining_time

    return True, None


@bot.message_handler(commands=['sth'])
def manage_hamsters(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    videos = [f for f in os.listdir(VIDEO_FOLDER) if f.endswith('.mp4')]
    if not videos:
        bot.send_message(message.chat.id, "‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤.")
        return

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ö–æ–º—è–∫–æ–≤
    last_5_videos = videos[-5:]
    last_5_names = [os.path.splitext(video)[0] for video in last_5_videos]

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(row_width=1)
    for name in last_5_names:
        button = InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {name}", callback_data=f"select_{name}")
        markup.add(button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫"
    search_button = InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_hamster")
    markup.add(search_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–º—è–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º:", reply_markup=markup)

def handle_search_input(message):
    query = message.text.strip().lower()
    videos = [f for f in os.listdir(VIDEO_FOLDER) if f.endswith('.mp4')]
    matching_names = [os.path.splitext(video)[0] for video in videos if query in os.path.splitext(video)[0].lower()]

    if not matching_names:
        bot.send_message(message.chat.id, "‚ùå –•–æ–º—è–∫–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ö–æ–º—è–∫–∞–º–∏
    markup = InlineKeyboardMarkup(row_width=1)
    for name in matching_names:
        button = InlineKeyboardButton(f"–≠—Ç–æ {name}?", callback_data=f"confirm_{name}")
        markup.add(button)

    bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ö–æ–º—è–∫–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "search_hamster")
def search_hamster(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏–º—è —Ö–æ–º—è–∫–∞:")
    bot.register_next_step_handler(call.message, handle_search_input)


@bot.callback_query_handler(func=lambda call: call.data.startswith("select_"))
def handle_hamster_selection(call):
    hamster_name = call.data.split("_", 1)[1]

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    markup = InlineKeyboardMarkup(row_width=1)
    button_delete = InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{hamster_name}")
    button_rename = InlineKeyboardButton("üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_{hamster_name}")
    button_test = InlineKeyboardButton("‚ñ∂Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data=f"test_{hamster_name}")
    markup.add(button_delete, button_rename, button_test)

    bot.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω —Ö–æ–º—è–∫: {hamster_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_hamster(call):
    hamster_name = call.data.split("_", 1)[1]
    file_path = os.path.join(VIDEO_FOLDER, f"{hamster_name}.mp4")

    if os.path.exists(file_path):
        os.remove(file_path)
        bot.answer_callback_query(call.id, f"–•–æ–º—è–∫ '{hamster_name}' —É–¥–∞–ª–µ–Ω.")
        bot.edit_message_text(f"–•–æ–º—è–∫ '{hamster_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("rename_"))
def rename_hamster_prompt(call):
    hamster_name = call.data.split("_", 1)[1]
    bot.answer_callback_query(call.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ö–æ–º—è–∫–∞ '{hamster_name}':")
    bot.register_next_step_handler(call.message, lambda msg: rename_hamster(msg, hamster_name))

def rename_hamster(message, old_name):
    new_name = message.text.strip()
    if not new_name:
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    old_file_path = os.path.join(VIDEO_FOLDER, f"{old_name}.mp4")
    new_file_path = os.path.join(VIDEO_FOLDER, f"{new_name}.mp4")

    if os.path.exists(old_file_path):
        os.rename(old_file_path, new_file_path)
        bot.send_message(message.chat.id, f"–•–æ–º—è–∫ '{old_name}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'.")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("test_"))
def test_hamster(call):
    hamster_name = call.data.split("_", 1)[1]
    file_path = os.path.join(VIDEO_FOLDER, f"{hamster_name}.mp4")

    if os.path.exists(file_path):
        with open(file_path, 'rb') as file:
            bot.send_video(call.message.chat.id, file)
            bot.answer_callback_query(call.id, f"–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Ö–æ–º—è–∫–∞ '{hamster_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['makeadmin'])
def make_admin(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if user_id in ADMINS:
        bot.send_message(message.chat.id, f"—è —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã—Ä–µ–∑–∞–ª")

@bot.message_handler(commands=['unadmin'])
def unmake_admin(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 1:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unadmin [id]")
        return

    target_id = int(args[0])
    admins_file_path = 'settings/admins.json'

    try:
        with open(admins_file_path, 'r') as file:
            admins_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        admins_data = {'admins': []}

    if target_id not in admins_data.get('admins', []):
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    admins_data['admins'].remove(target_id)
    with open(admins_file_path, 'w') as file:
        json.dump(admins_data, file)

    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    bot.send_message(target_id, "üîí –í–∞—à —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª —Å–Ω—è—Ç.")

def is_admin(user_id):
    admins_file_path = 'settings/admins.json'
    try:
        with open(admins_file_path, 'r') as file:
            admins_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        admins_data = {'admins': []}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

    return user_id in admins_data.get('admins', []) or user_id == ADMINS

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_hamster(call):
    hamster_name = call.data.split("_", 1)[1]

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    markup = InlineKeyboardMarkup(row_width=1)
    button_delete = InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{hamster_name}")
    button_rename = InlineKeyboardButton("üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_{hamster_name}")
    button_test = InlineKeyboardButton("‚ñ∂Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data=f"test_{hamster_name}")
    markup.add(button_delete, button_rename, button_test)

    bot.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ö–æ–º—è–∫–∞: {hamster_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.message_handler(commands=['premiumtop'])
def premium_top(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
    permanent_premium_users = []
    temporary_premium_users = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id, user_data in users_data.items():
        if user_data.get('premium', False):  # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º
            expiration_time = user_data.get('premium_expiration')
            if expiration_time:  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è
                expiration_date = datetime.datetime.fromisoformat(expiration_time)
                remaining_time = expiration_date - get_current_time()
                hours, remainder = divmod(remaining_time.seconds, 3600)
                minutes = remainder // 60
                try:
                    user = bot.get_chat_member(user_id, user_id).user
                    username = f"@{user.username}" if user.username else "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    temporary_premium_users.append(
                        f"{username} [ID: {user_id}] ‚Äî –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            else:  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
                try:
                    user = bot.get_chat_member(user_id, user_id).user
                    username = f"@{user.username}" if user.username else "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    permanent_premium_users.append(f"{username} [ID: {user_id}]")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    premium_top_message = "üåü –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Premium-–ø–æ–¥–ø–∏—Å–∫–æ–π:\n\n"

    if permanent_premium_users:
        premium_top_message += "‚ú® –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:\n"
        premium_top_message += "\n".join(permanent_premium_users) + "\n\n"
    else:
        premium_top_message += "‚ú® –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: –ù–µ—Ç\n\n"

    if temporary_premium_users:
        premium_top_message += "‚è≥ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:\n"
        premium_top_message += "\n".join(temporary_premium_users) + "\n\n"
    else:
        premium_top_message += "‚è≥ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: –ù–µ—Ç\n\n"

    bot.send_message(message.chat.id, premium_top_message)

@bot.message_handler(commands=['s'])
def send_as_bot(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /s [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
        return

    custom_message = args[1]
    bot.send_message(message.chat.id, custom_message)

def generate_promocode(length=8):
    chars = string.ascii_uppercase + string.digits  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    while True:
        promocode = ''.join(random.choices(chars, k=length))  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        promocodes_file_path = 'settings/promocodes.json'
        try:
            with open(promocodes_file_path, 'r') as file:
                promocodes_data = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            promocodes_data = {}
        if promocode not in promocodes_data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
            return promocode

@bot.message_handler(commands=['usepromo'])
def use_promo(message):
    args = message.text.split()[1:]
    if len(args) != 1:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /usepromo [promocode]")
        return

    promocode = args[0]
    user_id = message.from_user.id
    promocodes_file_path = 'settings/promocodes.json'
    users_file_path = 'settings/users.json'

    try:
        with open(promocodes_file_path, 'r') as file:
            promocodes_data = json.load(file)
    except json.JSONDecodeError:
        promocodes_data = {}

    if promocode not in promocodes_data:
        bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return

    promo_data = promocodes_data[promocode]
    if promo_data['activations'] <= 0:
        bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.")
        del promocodes_data[promocode]
        with open(promocodes_file_path, 'w') as file:
            json.dump(promocodes_data, file)
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_data['activations'] -= 1
    with open(promocodes_file_path, 'w') as file:
        json.dump(promocodes_data, file)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    initialize_user(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}

    if promo_data['type'] == 1:  # Premium-–ø–æ–¥–ø–∏—Å–∫–∞
        if promo_data['duration'] == 0.01:  # –í–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            users_data[str(user_id)]['premium'] = True
            if 'premium_expiration' in users_data[str(user_id)]:
                del users_data[str(user_id)]['premium_expiration']
            bot.send_message(message.chat.id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–µ—á–Ω—É—é Premium-–ø–æ–¥–ø–∏—Å–∫—É!")
        else:  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            expiration_time = get_current_time() + datetime.timedelta(hours=promo_data['duration'])
            users_data[str(user_id)]['premium'] = True
            users_data[str(user_id)]['premium_expiration'] = expiration_time.isoformat()
            bot.send_message(
                message.chat.id,
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é Premium-–ø–æ–¥–ø–∏—Å–∫—É!\n–û–Ω–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {expiration_time.strftime('%Y-%m-%d %H:%M:%S')}."
            )
            user = bot.get_chat_member(user_id, user_id).user
            username = user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            bot.send_message(
                MAIN_CHAT,
                f"bro {username}[ID: {user}] used promo {promocode}"
            )

    with open(users_file_path, 'w') as file:
        json.dump(users_data, file)

def is_premium_with_remaining_time(user_id):
    users_file_path = 'settings/users.json'
    try:
        with open(users_file_path, 'r') as file:
            users_data = json.load(file)
    except json.JSONDecodeError:
        users_data = {}
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—è premium, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –æ–±—ã—á–Ω—ã–º
    if str(user_id) not in users_data:
        return False, None
    
    user_data = users_data[str(user_id)]
    if not user_data.get('premium', False):
        return False, None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ premium_expiration –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    if 'premium_expiration' in user_data:
        expiration_time = datetime.datetime.fromisoformat(user_data['premium_expiration'])
        if get_current_time() > expiration_time:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            user_data['premium'] = False
            del user_data['premium_expiration']
            with open(users_file_path, 'w') as file:
                json.dump(users_data, file)
            return False, None
        
        remaining_time = expiration_time - get_current_time()
        return True, remaining_time
    
    # –ï—Å–ª–∏ –Ω–µ—Ç premium_expiration, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –≤–µ—á–Ω–∞—è
    return True, None

@bot.message_handler(commands=['logs'])
def get_logs(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    log_file_path = os.path.join(LOGS_DIR, "bot.log")
    if not os.path.exists(log_file_path):
        bot.send_message(message.chat.id, "–õ–æ–≥–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    one_day_ago = datetime.datetime.now() - timedelta(days=1)

    try:
        with open(log_file_path, 'r', encoding='utf-8') as file:
            logs = file.readlines()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        filtered_logs = []
        for line in logs:
            try:
                log_time = datetime.datetime.strptime(line[:19], '%Y-%m-%d %H:%M:%S')
                if log_time > one_day_ago:
                    filtered_logs.append(line)
            except ValueError:
                continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        if not filtered_logs:
            bot.send_message(message.chat.id, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –ª–æ–≥–æ–≤ –Ω–µ—Ç.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_log_file = os.path.join(LOGS_DIR, "last_24_hours_logs.txt")
        with open(temp_log_file, 'w', encoding='utf-8') as temp_file:
            temp_file.writelines(filtered_logs)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(temp_log_file, 'rb') as log_file:
            bot.send_document(message.chat.id, log_file, caption="–õ–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_log_file)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")

@bot.inline_handler(func=lambda query: True)
def query_text(inline_query):
    try:
        text = inline_query.query
        if not text:
            return

        # –ó–∞–º–µ–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –±—É–∫–≤—ã
        modified_text = text.replace('–≤', 'V').replace('–∑', 'Z').replace('—Å', 'Z').replace('–æ', '–û')
        
        r = types.InlineQueryResultArticle(
            id='1',
            title=f"–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–∞—Ç—Ä–∏–æ—Ç–∞",
            input_message_content=types.InputTextMessageContent(message_text=f"{modified_text}")
        )
        bot.answer_inline_query(inline_query.id, results=[r])
    except Exception as e:
        print(e)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@bot.message_handler(commands=['createpromo'])
def create_promo(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 3 or not args[0].isdigit() or not args[1].isdigit() or not args[2].replace('.', '', 1).isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /createpromo [–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π] [—Ç–∏–ø –ø—Ä–∏–∑–∞(1)] [–≤—Ä–µ–º—è/–∫–æ–ª-–≤–æ]")
        return

    activations = int(args[0])  # –ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    prize_type = int(args[1])   # –¢–∏–ø –ø—Ä–∏–∑–∞ (1 –∏–ª–∏ 2)
    duration = float(args[2])   # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è (–≤ —á–∞—Å–∞—Ö) –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–Ω—Å–æ–≤

    if prize_type not in [1]:
        bot.send_message(message.chat.id, "–¢–∏–ø –ø—Ä–∏–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 1")
        return

    promocodes_file_path = 'settings/promocodes.json'
    try:
        with open(promocodes_file_path, 'r') as file:
            promocodes_data = json.load(file)
    except json.JSONDecodeError:
        promocodes_data = {}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    promocode = generate_promocode()
    while promocode in promocodes_data:
        promocode = generate_promocode()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promocodes_data[promocode] = {
        'activations': activations,
        'type': prize_type,
        'duration': duration
    }

    with open(promocodes_file_path, 'w') as file:
        json.dump(promocodes_data, file)

    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {promocode}\n–¢–∏–ø –ø—Ä–∏–∑–∞: Premium-–ø–æ–¥–ø–∏—Å–∫–∞\n–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}\n{'–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è (—á): ' + str(duration)}\n\n/usepromo {promocode}")

@bot.message_handler(commands=['addrf'])
def add_referrals(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 2:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addrf [id/@tag] [count]")
        return

    target_id = resolve_user_id(args[0])
    if target_id is None:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ @tag –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    try:
        count = int(args[1])
        if count <= 0:
            raise ValueError()

        referrals_file_path = 'settings/referrals.json'
        try:
            with open(referrals_file_path, 'r') as file:
                referrals_data = json.load(file)
        except json.JSONDecodeError:
            referrals_data = {}

        if str(target_id) not in referrals_data:
            referrals_data[str(target_id)] = {'referrals': [], 'bonus_time': 0}

        referrals_data[str(target_id)]['referrals'].extend([f"fake_ref_{i}" for i in range(count)])
        with open(referrals_file_path, 'w') as file:
            json.dump(referrals_data, file)

        bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

@bot.message_handler(commands=['addtime'])
def add_bonus_time_admin(message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 2:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addtime [id/@tag] [count]")
        return

    target_id = resolve_user_id(args[0])
    if target_id is None:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ @tag –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    try:
        hours = int(args[1])
        if hours <= 0:
            raise ValueError()

        update_bonus_time(target_id, hours)
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {hours} —á–∞—Å–æ–≤ –±–æ–Ω—É—Å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

def resolve_user_id(input_str):
    if input_str.startswith('@'):
        try:
            user_info = bot.get_chat(input_str)
            return user_info.id
        except Exception:
            return None
    elif input_str.isdigit():
        return int(input_str)
    return None

@bot.message_handler(commands=['storage'])
def storage(message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    referral_data = get_referral_data(user_id)
    referrals = referral_data['referrals']
    bonus_time = referral_data['bonus_time']

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    bot_username = bot.get_me().username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"

    bot.send_message(
        message.chat.id,
        f"üì¶ –í–∞—à —Å–∫–ª–∞–¥:\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(referrals)}\n"
        f"‚è∞ –ë–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–µ–º—è: {bonus_time} —á–∞—Å–æ–≤\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –∏ –ø–æ–ª—É—á–∞–π—Ç–µ -3 —á–∞—Å–∞ –∫ –ö–î –∑–∞ –∫–∞–∂–¥–æ–≥–æ!"
    )
    
@bot.message_handler(func=lambda message: message.text == "üì¶ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
def apply_bonus(message):
    user_id = message.from_user.id

    referral_data = get_referral_data(user_id)
    bonus_time = referral_data['bonus_time']

    if bonus_time <= 0:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–º–∞–∫—Å–∏–º—É–º: {}):".format(bonus_time)
    )
    bot.register_next_step_handler(msg, process_apply_bonus, bonus_time)

if __name__ == '__main__':
    user_states = {}
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
        except requests.exceptions.ConnectionError as e:
            MAIN_TOPIC_LOGS = 3
            current_time = datetime.datetime.now().time()
            bot.send_message(MAIN_CHAT, f"[TIME: {current_time}] –±–æ–æ–æ, —á—Ç–æ-—Ç–æ —Å –±–æ—Ç–æ–º —É–∂–∞—Å–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç: \n\n{e}\n\n @kittenello", message_thread_id=MAIN_TOPIC_LOGS)
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            import time
            time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π